name: Java CI with Maven

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

permissions:
  contents: read
  security-events: write

jobs:
  build:
    runs-on: ubuntu-latest

    outputs:
      version: ${{ steps.extract-version.outputs.version }}

    steps:
      - uses: actions/checkout@v4
      
      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: maven

      - name: Set executable permission for mvnw
        run: chmod +x mvnw
          
      - name: Extract Maven project version
        id: extract-version
        run: |
          VERSION=$(./mvnw help:evaluate -Dexpression=project.version -q -DforceStdout | tr -d '\n' | tr -d '\r')
          echo "Extracted version: $VERSION"
          if [ -z "$VERSION" ]; then
            echo "Version not found! Failing the build."
            exit 1
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Build with Maven
        run: mvn -B package --file pom.xml
      
      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: app-jar
          path: target/*.jar
    
  codacy-analysis:
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Run Codacy Analysis CLI
        uses: codacy/codacy-analysis-cli-action@d840f886c4bd4edc059706d09c6a1586111c540b
        with:
          project-token: ${{ secrets.CODACY_PROJECT_TOKEN }}
          verbose: true
          max-allowed-issues: 0
          output: results.sarif
          format: sarif

      - name: Upload SARIF results file
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: results.sarif


  docker:
    runs-on: ubuntu-latest
    needs: codacy-analysis
  
    steps:
      - uses: actions/checkout@v4
      
      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: app-jar
          path: .
  
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
  
      - name: Check if Docker image already exists
        id: check-image
        run: |
          IMAGE_EXISTS=$(docker manifest inspect vieirajunior/hello-world-github-actions:${{ needs.build.outputs.version }} > /dev/null 2>&1 && echo "true" || echo "false")
          echo "exists=$IMAGE_EXISTS" >> $GITHUB_OUTPUT
  
      - name: Set up QEMU
        if: steps.check-image.outputs.exists == 'false'
        uses: docker/setup-qemu-action@v3
  
      - name: Set up Docker Buildx
        if: steps.check-image.outputs.exists == 'false'
        uses: docker/setup-buildx-action@v3
  
      - name: Build and push Docker image
        if: steps.check-image.outputs.exists == 'false'
        uses: docker/build-push-action@v6
        with:
          push: true
          tags: |
            vieirajunior/hello-world-github-actions:latest
            vieirajunior/hello-world-github-actions:${{ needs.build.outputs.version }}
